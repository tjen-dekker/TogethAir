# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager
# Database

# Own Realm
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
# Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
sha256Matcher.storedCredentialsHexEncoded = false
#sha256Matcher.hashIterations = 1024

jdbcRealm.credentialsMatcher = $sha256Matcher

# User Query
# default is "select password from users where username = ?"
jdbcRealm.authenticationQuery = SELECT password FROM User WHERE email = ?

# permissions
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.userRolesQuery = select roleName from role where email = ?
jdbcRealm.permissionsQuery = select permission from rolespermission where roleName = ?

# Connection
ds = com.mysql.cj.jdbc.MysqlDataSource
ds.serverName = localhost
ds.user = root
#ds.password =
ds.databaseName = realdolmen
jdbcRealm.dataSource=$ds



authc.usernameParam = email
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml
logout.redirectUrl = /index.xhtml

# Use Built-in Chache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

securityManager.realms = $jdbcRealm

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined
# set of User accounts.



[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.




[urls]
# The 'urls' section is used for url-based security
# in web applications.

/admin/** = authc, roles[admin]
/partner/** = authc, roles[admin,partner]
/account.xhtml = authc



